{"version":3,"file":"react.cjs","sources":["../node_modules/react-dom/client.js","../src/react/toastImpl.ts"],"sourcesContent":["'use strict';\n\nvar m = require('react-dom');\nif (process.env.NODE_ENV === 'production') {\n  exports.createRoot = m.createRoot;\n  exports.hydrateRoot = m.hydrateRoot;\n} else {\n  var i = m.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n  exports.createRoot = function(c, o) {\n    i.usingClientEntryPoint = true;\n    try {\n      return m.createRoot(c, o);\n    } finally {\n      i.usingClientEntryPoint = false;\n    }\n  };\n  exports.hydrateRoot = function(c, h, o) {\n    i.usingClientEntryPoint = true;\n    try {\n      return m.hydrateRoot(c, h, o);\n    } finally {\n      i.usingClientEntryPoint = false;\n    }\n  };\n}\n","import React from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { ReactToast } from './Toast.tsx';\nimport type { ToastProps, ToastType } from '../types.js';\n\n// Store for tracking active toast roots\ninterface ToastRoot {\n  root: ReturnType<typeof createRoot>;\n  element: HTMLElement;\n}\n\n// Toast option types\nexport type ToastOptions = Partial<Omit<ToastProps, 'message' | 'type'>> & {\n  theme?: 'light' | 'dark' | 'auto'\n};\n\n// Define the toast API interface\nexport interface ToastAPI {\n  show: (props: ToastProps & { theme?: 'light' | 'dark' | 'auto' }) => string;\n  success: (message: string, options?: ToastOptions) => string;\n  error: (message: string, options?: ToastOptions) => string;\n  info: (message: string, options?: ToastOptions) => string;\n  dismiss: (id: string) => void;\n  dismissAll: () => void;\n}\n\n// Keep track of all active toasts\nconst toastRoots: Record<string, ToastRoot> = {};\n\n// Main toast API implementation\nconst toastImpl: ToastAPI = {\n  /**\n   * Shows a toast notification with the given props\n   */\n  show: (props: ToastProps & { theme?: 'light' | 'dark' | 'auto' }) => {\n    // Create mount element for the toast\n    const toastElement = document.createElement('div');\n    document.body.appendChild(toastElement);\n\n    // Generate unique ID for this toast instance\n    const id = `toast-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n\n    // Create React root\n    const root = createRoot(toastElement);\n\n    // Store references for cleanup\n    toastRoots[id] = { root, element: toastElement };\n\n    // Create props with onHide handler\n    const toastProps = {\n      ...props,\n      onHide: () => {\n        // Chain the original onHide if provided\n        if (props.onHide) {\n          props.onHide();\n        }\n\n        // Clean up this toast\n        toastImpl.dismiss(id);\n      }\n    };\n\n    // Render toast component\n    root.render(React.createElement(ReactToast, toastProps));\n\n    return id;\n  },\n\n  /**\n   * Shows a success toast notification\n   */\n  success: (\n    message: string,\n    options?: ToastOptions\n  ) => {\n    return toastImpl.show({\n      message,\n      type: 'success' as ToastType,\n      position: 'bottom-right',\n      duration: 3000,\n      ...options\n    });\n  },\n\n  /**\n   * Shows an error toast notification\n   */\n  error: (\n    message: string,\n    options?: ToastOptions\n  ) => {\n    return toastImpl.show({\n      message,\n      type: 'error' as ToastType,\n      position: 'bottom-right',\n      duration: 4000,\n      ...options\n    });\n  },\n\n  /**\n   * Shows an info toast notification\n   */\n  info: (\n    message: string,\n    options?: ToastOptions\n  ) => {\n    return toastImpl.show({\n      message,\n      type: 'info' as ToastType,\n      position: 'bottom-right',\n      duration: 3000,\n      ...options\n    });\n  },\n\n  /**\n   * Dismisses a specific toast by ID\n   */\n  dismiss: (id: string) => {\n    const toastRoot = toastRoots[id];\n    if (toastRoot) {\n      // Unmount React component\n      toastRoot.root.unmount();\n\n      // Remove the DOM element with a small delay to allow animations to complete\n      setTimeout(() => {\n        if (document.body.contains(toastRoot.element)) {\n          document.body.removeChild(toastRoot.element);\n        }\n      }, 100);\n\n      // Remove from tracking object\n      delete toastRoots[id];\n    }\n  },\n\n  /**\n   * Dismisses all active toasts\n   */\n  dismissAll: () => {\n    Object.keys(toastRoots).forEach(id => toastImpl.dismiss(id));\n  }\n};\n\n// Export the toast API\nexport const toast = toastImpl; "],"names":["m","require$$0","createRoot","i","c","o","toastRoots","toastImpl","props","toastElement","id","root","toastProps","React","ReactToast","message","options","toastRoot","toast"],"mappings":"wKAEIA,EAAIC,EACR,GAAI,QAAQ,IAAI,WAAa,aAC3BC,EAAqBF,EAAE,WACDA,EAAE,gBACnB,CACL,IAAIG,EAAIH,EAAE,mDACVE,EAAqB,SAASE,EAAGC,EAAG,CAClCF,EAAE,sBAAwB,GAC1B,GAAI,CACF,OAAOH,EAAE,WAAWI,EAAGC,CAAC,CAC9B,QAAc,CACRF,EAAE,sBAAwB,EAChC,CACG,CASH,CCGA,MAAMG,EAAwC,CAAC,EAGzCC,EAAsB,CAI1B,KAAOC,GAA8D,CAE7D,MAAAC,EAAe,SAAS,cAAc,KAAK,EACxC,SAAA,KAAK,YAAYA,CAAY,EAGtC,MAAMC,EAAK,SAAS,KAAK,IAAA,CAAK,IAAI,KAAK,OAAO,EAAE,SAAS,EAAE,EAAE,OAAO,EAAG,CAAC,CAAC,GAGnEC,EAAOT,EAAWO,CAAY,EAGpCH,EAAWI,CAAE,EAAI,CAAE,KAAAC,EAAM,QAASF,CAAa,EAG/C,MAAMG,EAAa,CACjB,GAAGJ,EACH,OAAQ,IAAM,CAERA,EAAM,QACRA,EAAM,OAAO,EAIfD,EAAU,QAAQG,CAAE,CAAA,CAExB,EAGA,OAAAC,EAAK,OAAOE,EAAM,cAAcC,EAAA,WAAYF,CAAU,CAAC,EAEhDF,CACT,EAKA,QAAS,CACPK,EACAC,IAEOT,EAAU,KAAK,CACpB,QAAAQ,EACA,KAAM,UACN,SAAU,eACV,SAAU,IACV,GAAGC,CAAA,CACJ,EAMH,MAAO,CACLD,EACAC,IAEOT,EAAU,KAAK,CACpB,QAAAQ,EACA,KAAM,QACN,SAAU,eACV,SAAU,IACV,GAAGC,CAAA,CACJ,EAMH,KAAM,CACJD,EACAC,IAEOT,EAAU,KAAK,CACpB,QAAAQ,EACA,KAAM,OACN,SAAU,eACV,SAAU,IACV,GAAGC,CAAA,CACJ,EAMH,QAAUN,GAAe,CACjB,MAAAO,EAAYX,EAAWI,CAAE,EAC3BO,IAEFA,EAAU,KAAK,QAAQ,EAGvB,WAAW,IAAM,CACX,SAAS,KAAK,SAASA,EAAU,OAAO,GACjC,SAAA,KAAK,YAAYA,EAAU,OAAO,GAE5C,GAAG,EAGN,OAAOX,EAAWI,CAAE,EAExB,EAKA,WAAY,IAAM,CACT,OAAA,KAAKJ,CAAU,EAAE,WAAcC,EAAU,QAAQG,CAAE,CAAC,CAAA,CAE/D,EAGaQ,EAAQX","x_google_ignoreList":[0]}